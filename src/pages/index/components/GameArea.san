<template>
    <div id="gameArea">
        <div id="timeUp">
            <div>
                <h1>Time ran out</h1>
                <p>Your final sore is {{score}}</p>
                <button id="reload" on-click="reload">Reload</button>
            </div>  
        </div>

        <div id="title">Speed Typer</div>
        <p>Time left: {{remainder}}s</p>
        <p>Score: {{score}}</p>
        <p>Type the following:</p>
        <div id="targetWord">{{targetWord}}</div>
        <input type="text" 
            id="input" 
            placeholder="Type the word here..."
            on-keyup="detectWord"/>
    </div>
</template>

<script lang="ts">
import {Component} from 'san';

let timer: any = null;
export default class GameArea extends Component {
    initData() {
        return {
            score: 0,
            remainder: 10,
            difficultyLevel: 'easy',
            targetWord: 'hello',
            wordList: ['hello', 'world', 'goodbye', 'welcome', 'service', 'thank', 'hope', 'important', 'starry', 'lovely', 'interesting'
            , 'amazing', 'beautiful', 'perfect', 'awesome', 'michishibube', 'young', 'happiness', 'universe', 'star', 'planet', 'moon'
            , 'sun', 'mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto', 'milkway', 'rainbow', 
            'reborn'],
        }
    }

    reload() {
        this.data.set('score', 0);
        this.data.set('remainder', 10);
        document.getElementById('timeUp').style.display = 'none';
        this.losingTime();
    }

    detectWord() {
        let inputting = document.getElementById('input') as HTMLInputElement;
        if (inputting.value === this.data.get('targetWord')) {
            inputting.value = '';
            this.data.set('score', this.data.get('score') + 1);
            let words = this.data.get('wordList');
            let nextWord = words[Math.floor(Math.random() * words.length)];
            this.data.set('targetWord', nextWord);
            if (this.data.get('difficultyLevel') === 'easy') {
                this.data.set('remainder', this.data.get('remainder') + 4);
            }
            else if (this.data.get('difficultyLevel') === 'normal') {
                this.data.set('remainder', this.data.get('remainder') + 3);
            }
            else {
                this.data.set('remainder', this.data.get('remainder') + 2);
            }
        }
    }

    losingTime() {
        timer = setInterval(() => {
            this.data.set('remainder', this.data.get('remainder') - 1);
        }, 1000);
    }

    attached() {
        this.losingTime();
        this.watch('remainder', function() {
            if (this.data.get('remainder') <= 0) {
                clearInterval(timer);
                document.getElementById('timeUp').style.display = 'flex';
            }
        });
    }
}

</script>

<style lang="less">
#gameArea {
    background-color: #34485e;
    width: 500px;
    height: 235px;
    box-shadow: 1px 1px 10px #ffffff;
    margin: 0 auto;
    position: relative;
    color: white;
}

#timeUp { 
    color: white;
    position: absolute;
    width: 500px;
    height: 235px;
    left: 0;
    top: 0;
    display: none;
    justify-content: center;
    align-items: center;
    text-align: center;
    z-index: 2;
    background-color: #34485e;
}

#reload{
    width: 65px;
    height: 30px;
    margin-top: 20px;
    font-size: 18px;
    border-radius: 6px;
    box-shadow: 0px 2px 8px #ffffff;
}

#title {
    width: 90%;
    background-color: #253241;
    border-radius: 5px;
    color: white;
    font-size: 30px;
    text-align: center;
    position: relative;
    left: 50%;
    transform: translateX(-50%);
    top: 10px;
}

#gameArea > p:nth-child(3),
#gameArea > p:nth-child(4){
    font-size: 20px;
    display: inline;
    position: relative;
    top: 20px;
}

#gameArea > p:nth-child(3){
    left: 4%;
}

#gameArea > p:nth-child(4){
    left: 55%;
    
}

#gameArea > p:nth-child(5){
    position: relative;
    left: 50%;
    width: 200px;
    text-align: center;
    transform: translateX(-50%);
    margin-top: 30px;
}

#targetWord {
    width: 90%;
    color: white;
    font-weight: bolder;
    font-size: 34px;
    text-align: center;
    position: relative;
    left: 50%;
    transform: translateX(-50%);
}

#input {
    border: 0;
    border-radius: 4px;
    font-size: 16px;
    width: 300px;
    padding: 12px 20px;
    margin-top: 10px;
    position: relative;
    left: 50%;
    transform: translateX(-50%);
}


</style>